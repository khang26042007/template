struct DSU{
    vector<int> parent, sz;

    DSU(int n) : parent(n + 1), sz(n + 1) {
        FOR(i, 1, n) {
            parent[i] = i;
            sz[i] = 1;
        }
    };

    int find_set(int v) {
        return v == parent[v] ? v : parent[v] = find_set(parent[v]);
    }

    bool join_sets(int a, int b) {
        a = find_set(a); b = find_set(b);
        if (a != b) {
            if (sz[a] < sz[b]) swap(a,b);
            parent[b] = a;
            sz[a] += sz[b];
            return 1;
        }
        return 0;
    }
};

struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;
    }
};

struct MST
{
    vector<Edge> edge;
    DSU dsu;

    MST(int V, int E) : dsu(V), edge(E) {};

    int result(int V, int E) {
        FOR(i, 1, V) dsu.make_set(i);
        sort(ALL(edge));

        int cost = 0;
        for(Edge e : edge) {
            if(dsu.join_sets(e.u, e.v)) {
                cost += e.w;
            }
        }

        return cost;
    }
};
